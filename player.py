"""
Класс Player -- базовый класс для всех видов игроков. Предполагается, что
игроков будет двое: человек и компьютер. У каждого игрока будет по два игровых
поля. В одном поле игрока размещаются его корабли. В другом поле располагается
собранная информация о поле противника. Поле каждого игрока заполняется
случайным образом по определенным правилам. Каждый игрок умеет определенные
вещи, такие как: выводить на экран свои игровые поля, делать ход, проверять
результаты хода противника и т.п. Игроки Компьютер и Человек будут по-разному
совершать некоторые из этих действий. Поэтому они будут переопределять
некоторые из этих действий.
"""

import random

from ship import Ship
from board import Board
from board import MoveResult


class Player:
    def __init__(self):
        self._own_board = Board()
        self._enemy_board = Board()

    def fill_board(self):
        # Создаем корабли. Один 3-х палубный, два 2-х палубных, четыре
        # однопалубных. Повторяем процедуру заново, если хотя бы один корабль
        # попал в окрестность другого корабля

        # Если корабль вертикальный 3-х палубный, то координата 0 <= row <= 3
        # Если корабль горизонтальный 3-х палубный, то координата 0 <= col <= 3
        # Если корабль вертикальный 2-х палубный, то координата 0 <= row <= 4
        # Если корабль горизонтальный 2-х палубный, то координата 0 <= col <= 4

        ships = []
        while True:
            # Создадим 3-х палубный корабль. Он задается координатами одного
            # угла и ориентацией. В случае горизонтального расположения
            # считаем созданную координату координатой левой палубы корабля.
            # В случае вертикального расположения -- считаем координатой
            # верхней палубы корабля
            row, col = random.randint(0, 3), random.randint(0, 3)

            # По умолчанию, корабль расположен горизонтально. Мы случайным
            # образом решаем, расположить ли корабль вертикально. Вероятность
            # вертикального расположения корабля можно менять, меняя цифру
            # справа от знака неравенства '>'.
            coords = [(row, col), (row, col + 1), (row, col + 2)]
            if random.randint(0, 9) > 5:
                # Корабль расположим вертикально
                coords = [(row, col), (row + 1, col), (row + 2, col)]
            ships.append(Ship(coords))

            # Аналогично создадим два 2-х палубных корабля. К 2-х палубным
            # кораблям предъявляется дополнительное требование. Все части
            # корабля должны находиться на расстоянии 1 клетка от 3-х палубного
            # и от других кораблей
            for i in range(2):
                row, col = random.randint(0, 4), random.randint(0, 4)
                coords = [(row, col), (row, col + 1)]
                if random.randint(0, 9) > 5:
                    # Корабль расположим вертикально
                    coords = [(row, col), (row + 1, col)]

                # Проверяем, что ни одна часть корабля не попадает в
                # окрестность другого корабля
                reset = False
                for s in ships:
                    for deck in coords:
                        if deck in s.neighborhood:
                            reset = True
                            break

                # Какой-то корабль попал в окрестность другого корабля
                # Повторить генерацию кораблей
                if reset:
                    ships.clear()
                    break

                ships.append(Ship(coords))

            # Создаем 4 однопалубных корабля. Ни один из них не должен попасть
            # в окрестность других кораблей
            for i in range(4):
                row, col = random.randint(0, 5), random.randint(0, 5)

                # Проверяем, что корабль не попадает в окрестность другого корабля
                reset = False
                for s in ships:
                    if (row, col) in s.neighborhood:
                        reset = True
                        break

                # Какой-то корабль попал в окрестность другого корабля
                # Повторить генерацию кораблей
                if reset:
                    ships.clear()
                    break

                ships.append(Ship([(row, col)]))

            # Всего должно быть создано 7 кораблей
            if len(ships) == 7:
                break

        # Корабли успешно созданы, добавляем их на игровое поле
        for s in ships:
            self._own_board.add_ship(s)

    # Ход игрока. Метод возвращает координаты клетки, в которую игрок
    # делает выстрел (ход)
    def make_move(self):
        pass

    # Проверяет сделанный ход. Возвращает статус: мимо, ранил, убил
    def check_move(self, coord):
        row, col = coord
        return self._own_board.update_cell((row - 1, col - 1))

    # Обновляет игровые поля в соответствии с результатом хода
    def update_boards(self, move_result: MoveResult):
        pass

    # Возвращает True, когда все корабли игрока уничтожены
    def is_looser(self) -> bool:
        return self.own_board.number_of_ships == 0

    # Возвращает список строк, представляющий собой поле игрока
    @property
    def own_board(self):
        return self._own_board

    # Возвращает список строк, представляющий собой поле соперника
    @property
    def enemy_board(self):
        return self._enemy_board

    def print_boards(self):
        # Делаем отступ от любого предыдущего вывода
        print()

        # Выводим горизонтальную ось координат на две доски
        print(
            "  | " + " | ".join(map(str, range(1, 7)))
            + "\t\t"
            + "  | " + " | ".join(map(str, range(1, 7)))
        )

        # К каждой строке клеток добавляем первым символом цифру оси
        # координат
        for i in range(1, 7):
            print(
                str(i) + " | "
                + " | ".join(list(map(str, self.own_board.as_list[i - 1])))
                + "\t\t"
                + str(i) + " | "
                + " | ".join(list(map(str, self.enemy_board.as_list[i - 1])))
            )
        print()
